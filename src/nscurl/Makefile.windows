
# -------------------------------
# Mandatory definitions
# -------------------------------
#   ARCH=x86|x64
#   CHAR=ANSI|Unicode
#   OUTDIR=<output_directory>
#   CONFIG=Debug|Release
# -------------------------------
# Optional definitions
# -------------------------------
#   CUSTOM_CFLAGS
#   CUSTOM_LDFLAGS
#   CUSTOM_RCFLAGS

# Convert input to lowercase
lower = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))
ifneq ($(ARCH),)
    _arch = $(call lower,$(ARCH))
endif
ifneq ($(CHAR),)
    _char = $(call lower,$(CHAR))
endif
ifneq ($(CONFIG),)
    _config = $(call lower,$(CONFIG))
endif


PROJECT  = NScurl
BIN      = $(PROJECT).dll
OBJ      = pluginapi.o main.o utils.o crypto.o curl.o queue.o gui.o resource.res
INC      =
ifeq ($(_config), debug)
	LIB = -lcurl-d -lzlibd
else
	LIB = -lcurl -lzlib
endif

LIB      += -lssl -lcrypto -lbrotlidec -lbrotlicommon -lnghttp2 -lzstd -ladvapi32 -lkernel32 -luser32 -lversion -lws2_32 -lcrypt32 -lmsvcrt -lgcc

_OBJ     = $(patsubst %,$(OUTDIR)/%,$(OBJ))
_BIN     = $(patsubst %,$(OUTDIR)/%,$(BIN))

DEF      = $(OUTDIR)/lib$(PROJECT).def
STATIC   = $(OUTDIR)/lib$(PROJECT).a

#
# https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html
# http://linux.die.net/man/1/gcc
# http://linux.die.net/man/1/ld
#

# vcpkg
VCPKG_TRIPLET = $(_arch)-mingw-static
VCPKG_INSTALLED = ../../vcpkg/$(VCPKG_TRIPLET)/installed/$(VCPKG_TRIPLET)

INC += -I$(VCPKG_INSTALLED)/include -I$(VCPKG_INSTALLED)/include/openssl
ifeq ($(_config), debug)
    LIB += -L$(VCPKG_INSTALLED)/debug/lib
else
    LIB += -L$(VCPKG_INSTALLED)/lib
endif

# ARCH
ifeq ($(_arch), x64)
	CFLAGS  += -Wall
	LDFLAGS += -Wl,-e'DllMain' -Wl,--high-entropy-va
	RCFLAGS += -F pe-x86-64
else
	CFLAGS  += -Wall -march=pentium2
	LDFLAGS += -Wl,-e'_DllMain'
	RCFLAGS += -F pe-i386
endif


# CHAR
ifeq ($(_char), ansi)
	CFLAGS  += -DMBCS -D_MBCS
	LDFLAGS +=
else
	CFLAGS  += -municode -DUNICODE -D_UNICODE
	LDFLAGS +=
endif

# https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/
CFLAGS += -D__USE_MINGW_ANSI_STDIO=0

ifeq ($(_config), debug)
	CFLAGS  += -DDEBUG -D_DEBUG -Og
else
	CFLAGS  += -DNEBUG -O3 -s
endif

CFLAGS += \
	-mdll \
	-fPIE \
	-ffunction-sections \
	-fdata-sections \
	-fno-unwind-tables \
	-fno-asynchronous-unwind-tables \
    -Wno-unused-function \
	$(INC) \
	$(CUSTOM_CFLAGS)

LDFLAGS += \
	$(CFLAGS) \
	-static \
	-Wl,--gc-sections \
	-Wl,--no-seh \
	-Wl,--nxcompat \
	-Wl,--dynamicbase \
	-Wl,--enable-auto-image-base \
	-Wl,--enable-stdcall-fixup \
	-Wl,--output-def,$(DEF) \
	-Wl,--out-implib,$(STATIC) \
	$(LIB) \
	$(CUSTOM_LDFLAGS)

RCFLAGS += \
	$(CUSTOM_RCFLAGS)


.PHONY: clean all-before all all-after nsis-sdk curl-ca-bundle vcpkg-install

clean:
	cmd /c if exist $(OUTDIR) rd /S /Q $(OUTDIR)

all: all-before nsis-sdk curl-ca-bundle vcpkg-install $(_BIN) all-after

all-before:
	cmd /c if not exist $(OUTDIR) mkdir $(OUTDIR)

nsis-sdk:
	py -3 _get_nsis_sdk.py

curl-ca-bundle:
	py -3 _get_curl-ca-bundle.py

vcpkg-install:
	cmd /c call ..\..\_install_vcpkg.bat $(_arch) mingw static

# Link
$(_BIN): $(_OBJ)
	gcc $(_OBJ) -o $(_BIN) $(LDFLAGS)

# Compile .c
$(OUTDIR)/%.o: %.c
	gcc $(CFLAGS) -o $@ -c $<

$(OUTDIR)/%.o: nsis/pluginapi.c
	gcc $(CFLAGS) -o $@ -c $<

# Compile .rc
$(OUTDIR)/%.res: %.rc
	windres -o $@ -i $< -O coff --input-format=rc $(RCFLAGS)
