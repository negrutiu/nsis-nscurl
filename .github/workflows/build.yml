name: Build
on:
  push:
    branches:
      - master
      - 'feature/**'
      - 'bugfix/**'
      - 'github/**'

  workflow_dispatch:

jobs:
  build:
    name: Build
    outputs:
      # accessible from other jobs as ${{needs.experiments.outputs.version}}
      version: ${{steps.version.outputs.version}}

    strategy:
      matrix:
        os: [windows-latest]
        arch: [amd64, x86]
        charset: [unicode]
        include:
          - os: windows-latest
            arch: x86
            charset: ansi

    runs-on: ${{matrix.os}}

    defaults:
        run:
          shell: cmd

    steps:
      - id: version
        name: Version
        shell: python
        run: |
          import os
          from datetime import datetime, timezone
          date = datetime.now(tz=timezone.utc)
          with open(os.getenv('GITHUB_OUTPUT'), "a") as fout:
            print(     f"version={date.year%100}.{date.month}.{date.day}.${{github.run_number}}")
            fout.write(f"version={date.year%100}.{date.month}.{date.day}.${{github.run_number}}")

      - name: Upgrade msys2/mingw32
        if: matrix.arch == 'x86'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw32
          release: false
          update: true
          install: git mingw-w64-i686-toolchain
          
      - name: Upgrade msys2/mingw64
        if: matrix.arch == 'amd64'
        uses: msys2/setup-msys2@v2
        with:
            msystem: mingw64
            release: false
            update: true
            install: mingw-w64-x86_64-toolchain

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Patch version
        working-directory: src/nscurl
        run: py -3 _set_version.py --version=${{steps.version.outputs.version}}

      - name: Checkout vcpkg
        uses: actions/checkout@v4
        with:
          repository: 'Microsoft/vcpkg'
          path: vcpkg/clone

      - name: Setup vcpkg cache
        uses: actions/cache@v4
        with:
          path: vcpkg/archives
          key: ${{runner.os}}-${{matrix.arch}}-${{matrix.charset}}-${{hashFiles('vcpkg/overlay_*', 'vcpkg/clone/ports/curl', 'vcpkg/clone/ports/openssl', 'vcpkg/clone/ports/nghttp2', 'vcpkg/clone/ports/zlib', 'vcpkg/clone/ports/brotli', 'vcpkg/clone/ports/zstd')}}

      # -----------------------------------------------------------------------
      - name: Build
        run: _build.bat mingw release ${{matrix.arch}} ${{matrix.charset}}
      # -----------------------------------------------------------------------

      - name: List `packages` files
        run: dir /s /b /a-d packages

      - name: Upload versions.json
        if: matrix.arch == 'x86' && matrix.charset == 'unicode'
        uses: actions/upload-artifact@v4
        with:
          name: versions
          path: Release-mingw-${{matrix.arch}}-${{matrix.charset}}/versions.json

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: package-${{matrix.arch}}-${{matrix.charset}}
          path: packages/Release-mingw-${{matrix.arch}}-${{matrix.charset}}/*

      - name: Upload curl
        if: matrix.charset == 'unicode'
        uses: actions/upload-artifact@v4
        with:
          name: curl-${{matrix.arch}}
          path: packages/Release-mingw-${{matrix.arch}}-curl/*

  package:
    name: Final Package
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: package-*
          merge-multiple: true

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: NScurl
          path: artifacts/*

        # Install an NSIS fork with amd64 support
        # note: NSIS-negrutiu sits in C:\Program Files\NSIS
        # note: NSIS-official sits in C:\Program Files (x86)\NSIS
      - name: Install NSIS-negrutiu
        shell: cmd
        run: |
          setlocal enabledelayedexpansion
          set version=3.10.7422.0
          set arch=amd64
          curl -L --fail -o nsis-%version%-negrutiu-%arch%.exe https://github.com/negrutiu/nsis/releases/download/v%version%/nsis-%version%-negrutiu-%arch%.exe || exit /b !errorlevel!
          echo installing...
          nsis-%version%-negrutiu-%arch%.exe /S

      - name: Build NSIS example (x86-unicode)
        shell: cmd
        run: |
          set PATH=%ProgramFiles%\NSIS;%PATH%
          "%ProgramFiles%\NSIS\makensis.exe" /V4 /DPLUGIN_DIR=..\..\Plugins\x86-unicode artifacts\Examples\NScurl\NScurl-Test.nsi

      - name: Build NSIS example (x86-ansi)
        shell: cmd
        run: |
          set PATH=%ProgramFiles%\NSIS;%PATH%
          makensis.exe /V4 /DPLUGIN_DIR=..\..\Plugins\x86-ansi /DANSI artifacts\Examples\NScurl\NScurl-Test.nsi

      - name: Build NSIS example (amd64-unicode)
        shell: cmd
        run: |
          set PATH=%ProgramFiles%\NSIS;%PATH%
          makensis.exe /V4 /DPLUGIN_DIR=..\..\Plugins\amd64-unicode /DAMD64 artifacts\Examples\NScurl\NScurl-Test.nsi

      - name: Upload NSIS examples
        uses: actions/upload-artifact@v4
        with:
          name: NScurl-Examples
          path: artifacts/Examples/NScurl/NScurl-Test-*.exe

  release:
    name: Release Draft
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/github/')
    needs: [build, package]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      # note: we're using dawidd6/action-download-artifact@v5 because of `skip_unpack`
      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v5
        with:
          path: artifacts
          name: ^NScurl$|^NScurl-Examples$|^versions$
          name_is_regexp: true
          run_id: ${{github.run_id}}
          skip_unpack: true

      - name: Prepare release notes
        shell: python
        run: |
          lines = []
          with open(".github/workflows/release-body.md") as fin:
            line = fin.read()
            line = line.replace('{version-engines}', '${{fromJson('artifacts/versions.json').curl_md}}')
            line = line.replace('{version-gcc}', '${{fromJson('artifacts/versions.json').gcc}}')
            line = line.replace('{url-workflow}', 'https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}')
            lines.append(line)
          with open(".github/workflows/release-body.md", "w") as fout:
            for line in lines:
              fout.write(line)
  
      - name: Create GitHub release draft
        uses: ncipollo/release-action@v1
        with:
          # note: `tag` is the release key
          tag: release-candidate
          name: v${{needs.build.outputs.version}}
          artifacts: artifacts/*
          bodyFile: .github/workflows/release-body.md
          draft: true
          makeLatest: true
          allowUpdates: true
          updateOnlyUnreleased: true
          artifactErrorsFailBuild: true
          removeArtifacts: true
